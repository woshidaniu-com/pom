<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.woshidaniu</groupId>
	<artifactId>niutal-ui</artifactId>
	<version>1.0.0</version>
	<packaging>pom</packaging>
	
	<modules>
		<module>niutal-ui-bak</module>
		<module>niutal-ui-v5</module>
		<module>niutal-ui-vue</module>
	</modules>
	
	<!-- 组织信息  -->
  	<organization>
		<name>我是大牛</name>
		<url>http://www.woshidaniu.com</url>
	</organization>
	
	<!-- 开发者信息  -->
    <developers>
        <developer>
        	<id>xxx</id>
            <name>xxx</name>
            <email>xxx</email>
        </developer>
    </developers> 
    
	<!-- 配置部署的远程仓库:让Maven知道当我要发布release版本或者snapshot版本是需要发布到哪个地址 --> 
    <distributionManagement>
		<repository>
			<id>Releases</id>
			<name>Nexus Release Repository</name>
			<url>http://10.71.19.153:8081/nexus/content/repositories/releases/</url>
		</repository>
		<snapshotRepository>
			<id>Snapshots</id>
			<name>Nexus Snapshot Repository</name>  
			<url>http://10.71.19.153:8081/nexus/content/repositories/snapshots/</url>
		</snapshotRepository>
	</distributionManagement>

	<!-- SCM配置 -->
	<scm>
		<connection>scm:svn:http://10.71.32.193/svn/repository/jszx_ui/zftal-ui/trunk/</connection>
		<developerConnection>scm:svn:http://10.71.32.193/svn/repository/jszx_ui/zftal-ui/trunk/</developerConnection>
		<tag>scm:svn:http://10.71.32.193/svn/repository/jszx_ui/zftal-ui/trunk/tags/</tag>
		<url>scm:svn:http://10.71.32.193/svn/repository/jszx_ui/zftal-ui/trunk/</url>
	</scm>
	
	<!-- 工程构建配置 -->
    <build>
		<pluginManagement>
			<plugins>
				<!-- 编译插件：编译主代码至主输出目录 -->  
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.5.1</version> 
					<!-- 设置源文件编码方式 -->  
					<configuration>
						<defaultLibBundleDir>lib</defaultLibBundleDir> 
						<!-- 源代码编译版本 -->
						<source>1.7</source>
						<!-- 目标平台编译版本 -->
						<target>1.7</target>
						<!-- 字符集编码 -->
						<encoding>${project.build.sourceEncoding}</encoding>
						<!--  -->
						<maxmem>512M</maxmem>
					</configuration>
				</plugin>
				<!-- 资源插件：复制主资源文件至主输出目录 -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<version>3.0.1</version>
					<!-- 解决资源文件的编码问题 -->  
					<configuration>
						<!-- 字符集编码 -->
						<encoding>${project.build.sourceEncoding}</encoding>
					</configuration>
				</plugin>
				<!-- 单元测试插件 ：执行测试用例-->  
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>2.19.1</version>
					<configuration>
						<!-- 跳过单元测试 -->
						<skip>true</skip>
						<skipTests>true</skipTests>
						<!--
							forkMode 可设置值有 “never”， “once”， “always” 和 “pertest”。
							pretest： 每一个测试创建一个新进程，为每个测试创建新的JVM是单独测试的最彻底方式，但也是最慢的，不适合hudson上持续回归。
							once：在一个进程中进行所有测试。once为默认设置，在Hudson上持续回归时建议使用默认设置。
							always：在一个进程中并行的运行脚本，Junit4.7以上版本才可以使用，surefire的版本要在2.6以上提供这个功能，其中 threadCount：执行时，指定可分配的线程数量。只和参数parallel配合使用有效。默认：5。
						 -->
						<forkMode>once</forkMode>
						<argLine>-Xmx1024m -XX:PermSize=256m -XX:MaxPermSize=256m -Dfile.encoding=UTF-8</argLine>  
						<additionalClasspathElements>  
			                <additionalClasspathElement>${basedir}/target/test-classes</additionalClasspathElement>  
			            </additionalClasspathElements>  
			            <includes>  
			                <include>**/*Test.java</include> 
			            </includes> 
                        <excludes>
                            <exclude>**/TestBean.java</exclude>
                        </excludes>
					</configuration>					
				</plugin>
				<!-- jar包生成插件 ：创建项目jar包--> 
				<plugin>  					 
					<groupId>org.apache.maven.plugins</groupId>  
					<artifactId>maven-jar-plugin</artifactId>  
					<version>3.0.2</version>  
					<configuration> 
						<encoding>${project.build.sourceEncoding}</encoding>
						<skipIfEmpty>false</skipIfEmpty> 
	                    <archive>  
	                    	<!-- 打包jar文件时，配置manifest文件，加入lib包的jar依赖  
	                        <manifest>  
	                            <addClasspath>true</addClasspath>  
	                            <classpathPrefix>lib/</classpathPrefix>  
	                            <mainClass>.....Main</mainClass>  
	                        </manifest>  -->
				            <manifest>
				            	 <!-- 在jar包中增加依赖jar路径说明 -->
				              	<addClasspath>true</addClasspath>
				            </manifest>
				            <!-- 用maven在MANIFEST.MF资料中的Class-Path中增加当前目录(.)  -->
	                        <manifestEntries>
	                           <Class-Path>.</Class-Path>
	                        </manifestEntries>
	                    </archive> 
	                </configuration>
				</plugin> 
				<!-- 源码插件:发布时自动将源码同时发布 -->				
				<plugin>
					 <groupId>org.apache.maven.plugins</groupId>
					 <artifactId>maven-source-plugin</artifactId>
					 <version>3.0.1</version> 
					 <!-- 打包source文件为jar文件 -->
					 <configuration>  
					 	 <testFailureIgnore>true</testFailureIgnore>
					 	 <!-- 打包源码一起发布到maven仓库中 -->
	                     <attach>true</attach>  
	                     <encoding>${project.build.sourceEncoding}</encoding>  
	                 </configuration> 
					 <executions>
						 <execution>
							 <id>attach-sources</id>
							 <phase>package</phase>
							 <goals>
							 	<!-- 
								 	jar-no-fork与jar的区别
									jar，在执行goal之前，执行generate-sources阶段，也就是说，如果，jar绑定的目标在generate-sources之后(比如verify)的话，generate-sources会执行两遍。
									jar-no-fork，没有其余动作，在绑定的phase执行。
								 -->
								<!-- <goal>jar</goal> -->
								<goal>jar-no-fork</goal>
							 </goals>
						 </execution>
					 </executions>
				</plugin>
				<!-- ant脚步执行插件 --> 
				<plugin>
		        	<groupId>org.apache.maven.plugins</groupId>
		            <artifactId>maven-antrun-plugin</artifactId>
		            <version>1.8</version>
		            <executions>
		                <execution>
		                    <phase>package</phase>
		                    <goals>
		                    	<goal>run</goal>
		                    </goals>
		                    <configuration>
		                        <target>
		                            <echo message="remove resources" />
		                            <!-- 在删除指定的目录，以达到最终的目录结构与压缩的war结构一样 -->
		                           	<delete dir="${destDirectory}/WEB-INF/classes/META-INF/resources/"/>
		                        </target>
		                    </configuration>
		                </execution>
		            </executions>
		        </plugin>
				<!-- war 包生成插件 -->
				<plugin>
					 <groupId>org.apache.maven.plugins</groupId>
					 <artifactId>maven-war-plugin</artifactId>
					 <version>3.1.0</version>
					 <configuration>
					 	<!-- 包含空目录 --> 
					 	<includeEmptyDirectories>true</includeEmptyDirectories>
					 	<!-- 是否将webapp下的逻辑代码打包成jar文件，使用此可选配置参数可将已编译的类归档到一个jar文件。 并且classes 目录将被从Web应用程序排除在外，主要表现是classes目录的编译的类不会再war包中。  -->
						<archiveClasses>false</archiveClasses>
						<!-- 是否 classes目录内容（也就是WEB-INF/classes目录下的内容）可以作为一个额外的依赖附着到项目中。 打包时将war项目中相关的类文件打成独立jar包；好处是：只修改class时，可以只更新jar -->
						<attachClasses>true</attachClasses>
						<!--独立jar包后缀名称 -->
						<classesClassifier>webjars</classesClassifier>
					 	<!-- 设置无web.xml时不报错 --> 
					 	<failOnMissingWebXml>false</failOnMissingWebXml>
					 	<!-- 必须指定,否则默认会变成在target/war/work 导致被打包进war文件,指定后为target/work -->
						<workDirectory>${project.build.directory}/work</workDirectory>
						
						<!-- 声明：
							1、warSourceExcludes（用于排除位于${warSourceDirectory}目录中的文件或目录）：
								当Maven拷贝${warSourceDirectory}至${project.build.directory}/${project.artifactId}-${project.version}目录时执行的过滤.
							2、packagingExcludes（用于排除位于src/main/resources目录中的文件或目录）：
								当 Maven将${project.build.directory}/${project.artifactId}-${project.version}目录打包成War包时执行的过滤.
						-->
						<!-- 指定webapp所在目录-->
						<warSourceDirectory>${project.basedir}/src/main/webapp</warSourceDirectory>
						<!-- 表示在打war包拷贝位于warSourceDirectory目录中的内容时要过滤的目录或文件 -->
						<warSourceExcludes>META-INF/resources/**</warSourceExcludes>
						
						<packagingExcludes>**/META-INF/resources/**</packagingExcludes> 
	                    
				        <!-- 配置将资源文件打到classes目录下的相关信息-->
						<webResources>
							<resource>
								<!-- 元配置文件的目录，相对于pom.xml文件的路径 -->  
								<directory>src/main/resources</directory>
				                <!-- 目标路径 -->  
				                <targetPath>WEB-INF/classes</targetPath>  
							</resource>
					 	</webResources>
					 </configuration>
				</plugin>
		        <!-- 安装插件：将项目输出构件安装到本地仓库 --> 
				<plugin>  					 
					<groupId>org.apache.maven.plugins</groupId>  
					<artifactId>maven-install-plugin</artifactId>  
					<version>2.5.2</version>  
				</plugin> 
				<!-- 发布插件 ：将项目输出构件部署到远程仓库--> 
				<plugin>  
		            <groupId>org.apache.maven.plugins</groupId>  
		            <artifactId>maven-deploy-plugin</artifactId>  
		            <version>2.8.2</version>  
		        </plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<!-- 编译插件：编译主代码至主输出目录 -->  
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
			</plugin>
			<!-- 资源插件：复制主资源文件至主输出目录 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
			</plugin>
			<!-- 单元测试插件 ：执行测试用例 --> 
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
			</plugin>
			<!-- jar包生成插件 ：创建项目jar包 -->
			<plugin>  					 
				<groupId>org.apache.maven.plugins</groupId>  
				<artifactId>maven-jar-plugin</artifactId>  
			</plugin> 
			<!-- 安装插件：将项目输出构件安装到本地仓库 --> 
			<plugin>  					 
				<groupId>org.apache.maven.plugins</groupId>  
				<artifactId>maven-install-plugin</artifactId>  
			</plugin> 
			<!-- 发布插件 ：将项目输出构件部署到远程仓库--> 
			<plugin>  
	            <groupId>org.apache.maven.plugins</groupId>  
	            <artifactId>maven-deploy-plugin</artifactId>  
	        </plugin>
		</plugins>
	</build>
	
	<!-- 依赖版本-->
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<outputDirectory>${project.build.outputDirectory}/META-INF/resources/webjars/${project.artifactId}</outputDirectory>
		<alibaba-fastjson.version>1.2.32</alibaba-fastjson.version>
		<commons-fileupload.version>1.3.2</commons-fileupload.version>
		<commons-io.version>2.5</commons-io.version>
		<destDirectory>${project.build.directory}/${project.build.finalName}</destDirectory>
		<javax.jsp-api.version>2.3.1</javax.jsp-api.version>
		<javax.jstl-api.version>1.2.1</javax.jstl-api.version>
		<javax.jstl-impl.version>1.1.2</javax.jstl-impl.version>
		<javax.servlet-api.version>3.0.1</javax.servlet-api.version>
		<junit.version>4.12</junit.version>
		<slf4j.version>1.7.21</slf4j.version>
	</properties>
	
	<dependencyManagement>
		<dependencies>
		
			<!-- ######################测试工具包###################### -->
			
			<!--junit : Junit测试是程序员测试，即白盒测试 -->
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${junit.version}</version>
			</dependency>
			
			<!-- ###################### Java Web API ###################### -->
			
			<!-- Java Servlet API -->
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>javax.servlet-api</artifactId>
				<version>${javax.servlet-api.version}</version>
			</dependency>
			<!-- JavaServer Pages(TM) API  -->
			<dependency>
			    <groupId>javax.servlet.jsp</groupId>
			    <artifactId>javax.servlet.jsp-api</artifactId>
			    <version>${javax.jsp-api.version}</version>
			</dependency>
			<!-- JavaServer Pages(TM) Standard Tag Library API -->
			<!-- JSTL（JSP Standard Tag Library，JSP标准标签库) 是一个不断完善的开放源代码的JSP标签库，是由apache的jakarta小组来维护的。 -->
			<dependency>
			    <groupId>javax.servlet.jsp.jstl</groupId>
			    <artifactId>javax.servlet.jsp.jstl-api</artifactId>
			    <version>${javax.jstl-api.version}</version>
			</dependency>
			<!-- An implementation of the JSP Standard Tag Library (JSTL).  -->
			<!-- Taglibs是为JSP定制标签库和相关的项目提供的一个开源仓库，如TagLibraryValidator类，和对页面生成工具的扩展来支持标签 库。 -->
			<dependency>
				<groupId>taglibs</groupId>
				<artifactId>standard</artifactId>
				<version>${javax.jstl-impl.version}</version>
			</dependency>
			
			<!-- ######################日志组件工具包###################### -->
			
			<!-- SLF4J，即简单日志门面（Simple Logging Facade for Java），不是具体的日志解决方案，它只服务于各种各样
				 的日志系统。按照官方的说法，SLF4J是一个用于日志系统的简单Facade，允许最终用户在部署其应用时使用其所希望的日志系统。 -->
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-api</artifactId>
				<version>${slf4j.version}</version>
			</dependency>
			
			<!-- ######################JSON数据处理工具包###################### -->
			
			<!--
				fastjson 是一个性能很好的 Java 语言实现的 JSON 解析器和生成器，来自阿里巴巴的工程师开发。 主要特点： 快速FAST
				(比其它任何基于Java的解析器和生成器更快，包括jackson） 强大（支持普通JDK类包括任意Java Bean
				Class、Collection、Map、Date或enum） 零依赖（没有依赖其它任何类库除了JDK）
			-->
			<dependency>
				<groupId>com.alibaba</groupId>
				<artifactId>fastjson</artifactId>
				<version>${alibaba-fastjson.version}</version>
			</dependency>
			
			<!-- apache 上传组件 -->
			<dependency>
				<groupId>commons-fileupload</groupId>
				<artifactId>commons-fileupload</artifactId>
				<version>${commons-fileupload.version}</version>
			</dependency>
			<!-- Commons项目中用来处理IO的一些工具类包 -->
			<dependency>
				<groupId>commons-io</groupId>
				<artifactId>commons-io</artifactId>
				<version>${commons-io.version}</version>
			</dependency>
			
		</dependencies>
	</dependencyManagement>
	
	<!-- 通用依赖 -->
	<dependencies>
	
		<!-- ######################测试工具包###################### -->
		
		<!--junit,dbunit 测试工具-->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		
		<!-- ###################### Java Web API ###################### -->
        
        <!-- Java Servlet API -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<!-- JavaServer Pages(TM) API  -->
		<dependency>
		    <groupId>javax.servlet.jsp</groupId>
		    <artifactId>javax.servlet.jsp-api</artifactId>
		    <scope>provided</scope>
		</dependency>
		<!-- JavaServer Pages(TM) Standard Tag Library API -->
		<dependency>
		    <groupId>javax.servlet.jsp.jstl</groupId>
		    <artifactId>javax.servlet.jsp.jstl-api</artifactId>
		    <scope>provided</scope>
		</dependency>
		<!-- An implementation of the JSP Standard Tag Library (JSTL).  -->
		<dependency>
			<groupId>taglibs</groupId>
			<artifactId>standard</artifactId>
		</dependency>
		
		<!-- ######################日志组件工具包###################### -->
		
		<!-- The slf4j API  -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>
		
	</dependencies>

</project>